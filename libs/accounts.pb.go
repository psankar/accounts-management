// Code generated by protoc-gen-go.
// source: accounts.proto
// DO NOT EDIT!

/*
Package accounts is a generated protocol buffer package.

It is generated from these files:
	accounts.proto

It has these top-level messages:
	NilParam
	AvailabilityResponse
	GenericString
	SignUpRequest
	GenericResponse
	Settings
	NewAccountDetails
	SignInRequest
	Username
*/
package accounts

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NilParam struct {
}

func (m *NilParam) Reset()                    { *m = NilParam{} }
func (m *NilParam) String() string            { return proto.CompactTextString(m) }
func (*NilParam) ProtoMessage()               {}
func (*NilParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AvailabilityResponse struct {
	Available bool `protobuf:"varint,1,opt,name=Available" json:"Available,omitempty"`
}

func (m *AvailabilityResponse) Reset()                    { *m = AvailabilityResponse{} }
func (m *AvailabilityResponse) String() string            { return proto.CompactTextString(m) }
func (*AvailabilityResponse) ProtoMessage()               {}
func (*AvailabilityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AvailabilityResponse) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

type GenericString struct {
	String_ string `protobuf:"bytes,1,opt,name=String" json:"String,omitempty"`
}

func (m *GenericString) Reset()                    { *m = GenericString{} }
func (m *GenericString) String() string            { return proto.CompactTextString(m) }
func (*GenericString) ProtoMessage()               {}
func (*GenericString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GenericString) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

type SignUpRequest struct {
	// At least one field should be present
	EmailAddress string `protobuf:"bytes,1,opt,name=EmailAddress" json:"EmailAddress,omitempty"`
	PhoneNumber  string `protobuf:"bytes,2,opt,name=PhoneNumber" json:"PhoneNumber,omitempty"`
}

func (m *SignUpRequest) Reset()                    { *m = SignUpRequest{} }
func (m *SignUpRequest) String() string            { return proto.CompactTextString(m) }
func (*SignUpRequest) ProtoMessage()               {}
func (*SignUpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignUpRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *SignUpRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type GenericResponse struct {
	Status      int32  `protobuf:"varint,1,opt,name=Status" json:"Status,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *GenericResponse) Reset()                    { *m = GenericResponse{} }
func (m *GenericResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()               {}
func (*GenericResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GenericResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GenericResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Settings struct {
	Settings map[string]string `protobuf:"bytes,1,rep,name=Settings" json:"Settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Settings) Reset()                    { *m = Settings{} }
func (m *Settings) String() string            { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()               {}
func (*Settings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Settings) GetSettings() map[string]string {
	if m != nil {
		return m.Settings
	}
	return nil
}

type NewAccountDetails struct {
	// VerificationString can tell which of email or phone is confirmed
	VerificationString string    `protobuf:"bytes,1,opt,name=VerificationString" json:"VerificationString,omitempty"`
	Username           string    `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Password           string    `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Settings           *Settings `protobuf:"bytes,4,opt,name=Settings" json:"Settings,omitempty"`
}

func (m *NewAccountDetails) Reset()                    { *m = NewAccountDetails{} }
func (m *NewAccountDetails) String() string            { return proto.CompactTextString(m) }
func (*NewAccountDetails) ProtoMessage()               {}
func (*NewAccountDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NewAccountDetails) GetVerificationString() string {
	if m != nil {
		return m.VerificationString
	}
	return ""
}

func (m *NewAccountDetails) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *NewAccountDetails) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *NewAccountDetails) GetSettings() *Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type SignInRequest struct {
	Username     string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	EmailAddress string `protobuf:"bytes,2,opt,name=EmailAddress" json:"EmailAddress,omitempty"`
	PhoneNumber  string `protobuf:"bytes,3,opt,name=PhoneNumber" json:"PhoneNumber,omitempty"`
	Password     string `protobuf:"bytes,4,opt,name=Password" json:"Password,omitempty"`
	// Session validity in hours
	Validity int32 `protobuf:"varint,5,opt,name=Validity" json:"Validity,omitempty"`
}

func (m *SignInRequest) Reset()                    { *m = SignInRequest{} }
func (m *SignInRequest) String() string            { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()               {}
func (*SignInRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SignInRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignInRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *SignInRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SignInRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SignInRequest) GetValidity() int32 {
	if m != nil {
		return m.Validity
	}
	return 0
}

type Username struct {
	Username string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
}

func (m *Username) Reset()                    { *m = Username{} }
func (m *Username) String() string            { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()               {}
func (*Username) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Username) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*NilParam)(nil), "accounts.NilParam")
	proto.RegisterType((*AvailabilityResponse)(nil), "accounts.AvailabilityResponse")
	proto.RegisterType((*GenericString)(nil), "accounts.GenericString")
	proto.RegisterType((*SignUpRequest)(nil), "accounts.SignUpRequest")
	proto.RegisterType((*GenericResponse)(nil), "accounts.GenericResponse")
	proto.RegisterType((*Settings)(nil), "accounts.Settings")
	proto.RegisterType((*NewAccountDetails)(nil), "accounts.NewAccountDetails")
	proto.RegisterType((*SignInRequest)(nil), "accounts.SignInRequest")
	proto.RegisterType((*Username)(nil), "accounts.Username")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountsService service

type AccountsServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	CheckAvailability(ctx context.Context, in *Username, opts ...grpc.CallOption) (*AvailabilityResponse, error)
	CreateAccount(ctx context.Context, in *NewAccountDetails, opts ...grpc.CallOption) (*GenericResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UpdateAccount(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*GenericResponse, error)
	UpdateUserName(ctx context.Context, in *Username, opts ...grpc.CallOption) (*GenericResponse, error)
	ChangeEmailAddress(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error)
	ConfirmEmailChange(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error)
	ChangePhone(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error)
	ConfirmPhoneChange(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error)
	SignOut(ctx context.Context, in *NilParam, opts ...grpc.CallOption) (*GenericResponse, error)
	DeleteAccount(ctx context.Context, in *NilParam, opts ...grpc.CallOption) (*GenericResponse, error)
}

type accountsServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountsServiceClient(cc *grpc.ClientConn) AccountsServiceClient {
	return &accountsServiceClient{cc}
}

func (c *accountsServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) CheckAvailability(ctx context.Context, in *Username, opts ...grpc.CallOption) (*AvailabilityResponse, error) {
	out := new(AvailabilityResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/CheckAvailability", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) CreateAccount(ctx context.Context, in *NewAccountDetails, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) UpdateAccount(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) UpdateUserName(ctx context.Context, in *Username, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/UpdateUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) ChangeEmailAddress(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/ChangeEmailAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) ConfirmEmailChange(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/ConfirmEmailChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) ChangePhone(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/ChangePhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) ConfirmPhoneChange(ctx context.Context, in *GenericString, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/ConfirmPhoneChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) SignOut(ctx context.Context, in *NilParam, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/SignOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) DeleteAccount(ctx context.Context, in *NilParam, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/accounts.AccountsService/DeleteAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountsService service

type AccountsServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*GenericResponse, error)
	CheckAvailability(context.Context, *Username) (*AvailabilityResponse, error)
	CreateAccount(context.Context, *NewAccountDetails) (*GenericResponse, error)
	SignIn(context.Context, *SignInRequest) (*GenericResponse, error)
	UpdateAccount(context.Context, *Settings) (*GenericResponse, error)
	UpdateUserName(context.Context, *Username) (*GenericResponse, error)
	ChangeEmailAddress(context.Context, *GenericString) (*GenericResponse, error)
	ConfirmEmailChange(context.Context, *GenericString) (*GenericResponse, error)
	ChangePhone(context.Context, *GenericString) (*GenericResponse, error)
	ConfirmPhoneChange(context.Context, *GenericString) (*GenericResponse, error)
	SignOut(context.Context, *NilParam) (*GenericResponse, error)
	DeleteAccount(context.Context, *NilParam) (*GenericResponse, error)
}

func RegisterAccountsServiceServer(s *grpc.Server, srv AccountsServiceServer) {
	s.RegisterService(&_AccountsService_serviceDesc, srv)
}

func _AccountsService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/CheckAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).CheckAvailability(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).CreateAccount(ctx, req.(*NewAccountDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Settings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).UpdateAccount(ctx, req.(*Settings))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).UpdateUserName(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_ChangeEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).ChangeEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/ChangeEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).ChangeEmailAddress(ctx, req.(*GenericString))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_ConfirmEmailChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).ConfirmEmailChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/ConfirmEmailChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).ConfirmEmailChange(ctx, req.(*GenericString))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).ChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/ChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).ChangePhone(ctx, req.(*GenericString))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_ConfirmPhoneChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).ConfirmPhoneChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/ConfirmPhoneChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).ConfirmPhoneChange(ctx, req.(*GenericString))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).SignOut(ctx, req.(*NilParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NilParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.AccountsService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).DeleteAccount(ctx, req.(*NilParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accounts.AccountsService",
	HandlerType: (*AccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _AccountsService_SignUp_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _AccountsService_CheckAvailability_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountsService_CreateAccount_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _AccountsService_SignIn_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountsService_UpdateAccount_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _AccountsService_UpdateUserName_Handler,
		},
		{
			MethodName: "ChangeEmailAddress",
			Handler:    _AccountsService_ChangeEmailAddress_Handler,
		},
		{
			MethodName: "ConfirmEmailChange",
			Handler:    _AccountsService_ConfirmEmailChange_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _AccountsService_ChangePhone_Handler,
		},
		{
			MethodName: "ConfirmPhoneChange",
			Handler:    _AccountsService_ConfirmPhoneChange_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _AccountsService_SignOut_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountsService_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts.proto",
}

func init() { proto.RegisterFile("accounts.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6e, 0xda, 0x4e,
	0x10, 0x96, 0x21, 0xf0, 0x23, 0xc3, 0x8f, 0xa4, 0x59, 0x45, 0x0d, 0xa5, 0x55, 0x85, 0x7c, 0x68,
	0x73, 0xe2, 0x40, 0x7b, 0x88, 0xda, 0xaa, 0x15, 0x82, 0x88, 0x46, 0x95, 0x28, 0x32, 0x22, 0xf7,
	0xc5, 0x4c, 0x60, 0x15, 0xb3, 0xa6, 0xbb, 0x6b, 0x22, 0x1e, 0xa0, 0x0f, 0x53, 0xf5, 0x11, 0xfa,
	0x72, 0xb5, 0xbd, 0xfe, 0x0b, 0x14, 0xaa, 0xe6, 0xb6, 0x33, 0xb3, 0xf3, 0xcd, 0x37, 0xf3, 0xcd,
	0xda, 0x70, 0x42, 0x6d, 0xdb, 0xf5, 0xb8, 0x92, 0xad, 0xa5, 0x70, 0x95, 0x4b, 0x2a, 0xb1, 0x6d,
	0x02, 0x54, 0x06, 0xcc, 0x19, 0x52, 0x41, 0x17, 0xe6, 0x5b, 0x38, 0xef, 0xac, 0x28, 0x73, 0xe8,
	0x84, 0x39, 0x4c, 0xad, 0x2d, 0x94, 0x4b, 0x97, 0x4b, 0x24, 0x2f, 0xe0, 0x38, 0xf2, 0x3b, 0x58,
	0x37, 0x9a, 0xc6, 0x65, 0xc5, 0x4a, 0x1d, 0xe6, 0x6b, 0xa8, 0xf5, 0x91, 0xa3, 0x60, 0xf6, 0x48,
	0x09, 0xc6, 0x67, 0xe4, 0x29, 0x94, 0xf5, 0x29, 0xbc, 0x7b, 0x6c, 0x45, 0x96, 0x39, 0x86, 0xda,
	0x88, 0xcd, 0xf8, 0x78, 0x69, 0xe1, 0x37, 0x0f, 0xa5, 0x22, 0x26, 0xfc, 0x7f, 0xbd, 0xf0, 0x61,
	0x3a, 0xd3, 0xa9, 0x40, 0x29, 0xa3, 0xeb, 0x39, 0x1f, 0x69, 0x42, 0x75, 0x38, 0x77, 0x39, 0x0e,
	0xbc, 0xc5, 0x04, 0x45, 0xbd, 0x10, 0x5e, 0xc9, 0xba, 0xcc, 0x2f, 0x70, 0x1a, 0xd5, 0x4f, 0x08,
	0x87, 0x0c, 0xa8, 0xf2, 0x34, 0x64, 0xc9, 0x8a, 0xac, 0x00, 0xac, 0x87, 0xd2, 0x16, 0x6c, 0xa9,
	0x98, 0xcb, 0x63, 0xb0, 0x8c, 0xcb, 0xfc, 0x6e, 0x40, 0x65, 0x84, 0x4a, 0xf9, 0x7c, 0x25, 0xf9,
	0x90, 0x9e, 0x7d, 0xa0, 0xe2, 0x65, 0xb5, 0xdd, 0x6c, 0x25, 0x83, 0x8c, 0x23, 0xc9, 0xe1, 0x9a,
	0x2b, 0xb1, 0xb6, 0x92, 0x8c, 0xc6, 0x7b, 0xbf, 0xdd, 0x6c, 0x88, 0x3c, 0x81, 0xe2, 0x3d, 0xae,
	0xa3, 0x2e, 0x83, 0x23, 0x39, 0x87, 0xd2, 0x8a, 0x3a, 0x1e, 0x46, 0x4c, 0xb4, 0xf1, 0xae, 0x70,
	0x65, 0x98, 0x3f, 0x0d, 0x38, 0x1b, 0xe0, 0x43, 0x47, 0x57, 0xeb, 0xa1, 0xf2, 0x47, 0x22, 0x49,
	0x0b, 0xc8, 0xad, 0xdf, 0xe8, 0x1d, 0xb3, 0x69, 0xc0, 0x36, 0x37, 0xe5, 0x1d, 0x11, 0xd2, 0x80,
	0xca, 0x58, 0xa2, 0xe0, 0x74, 0x11, 0x97, 0x48, 0xec, 0x20, 0x36, 0xa4, 0x52, 0x3e, 0xb8, 0x62,
	0x5a, 0x2f, 0xea, 0x58, 0x6c, 0xfb, 0x75, 0xd2, 0xc6, 0x8f, 0xfc, 0x58, 0xb5, 0x4d, 0xb6, 0x1b,
	0x4f, 0x5b, 0x35, 0x7f, 0x18, 0x5a, 0xda, 0x1b, 0x1e, 0x4b, 0x9b, 0xad, 0x6c, 0x6c, 0x54, 0xde,
	0x94, 0xbd, 0x70, 0x58, 0xf6, 0xe2, 0x96, 0xec, 0x39, 0xfe, 0x47, 0x1b, 0xfc, 0xfd, 0xd8, 0x2d,
	0x75, 0xd8, 0xd4, 0x5f, 0xe2, 0x7a, 0x29, 0xdc, 0x80, 0xc4, 0x36, 0x5f, 0x41, 0x6e, 0x06, 0x7f,
	0x62, 0xd9, 0xfe, 0x55, 0x86, 0xd3, 0x68, 0xfc, 0x72, 0x84, 0x62, 0xc5, 0x6c, 0xf4, 0x17, 0xa2,
	0xac, 0x37, 0x98, 0x5c, 0x64, 0xe6, 0x91, 0xdd, 0xe9, 0xc6, 0xb3, 0x34, 0xb0, 0xb9, 0x95, 0x7d,
	0x38, 0xeb, 0xce, 0xd1, 0xbe, 0xcf, 0xbe, 0x31, 0x92, 0x19, 0x6c, 0x5c, 0xba, 0xf1, 0x32, 0xf5,
	0xed, 0x7c, 0x8f, 0x7d, 0xa8, 0x75, 0x05, 0x52, 0x85, 0x11, 0x3f, 0xf2, 0x3c, 0x4d, 0xd8, 0x5a,
	0x9a, 0x7d, 0x8c, 0xa2, 0x7e, 0x6e, 0xf8, 0x66, 0x3f, 0x89, 0x90, 0xfb, 0xb2, 0x3f, 0x42, 0x6d,
	0xbc, 0x9c, 0x66, 0x68, 0xec, 0x58, 0x92, 0x7d, 0xf9, 0x9f, 0xe0, 0x44, 0xe7, 0x07, 0x8d, 0x0f,
	0x02, 0x3d, 0x76, 0x0d, 0x63, 0x0f, 0xc0, 0x67, 0x20, 0xdd, 0x39, 0xe5, 0x33, 0xcc, 0xad, 0xce,
	0xc5, 0x56, 0x82, 0x7e, 0x0d, 0x87, 0x90, 0x5c, 0x7e, 0xc7, 0xc4, 0x22, 0x84, 0xd2, 0xa8, 0xff,
	0x84, 0xd4, 0x81, 0xaa, 0xce, 0x0e, 0x77, 0xf5, 0x91, 0x64, 0x42, 0x8c, 0x47, 0x90, 0xb9, 0x82,
	0xff, 0x02, 0x35, 0xbf, 0x7a, 0x39, 0x6d, 0xe2, 0xef, 0xfd, 0x01, 0x6d, 0x7b, 0xe8, 0xe0, 0x4e,
	0x6d, 0xff, 0x22, 0x7f, 0x52, 0x0e, 0xff, 0x33, 0x6f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x1c,
	0xa4, 0x8b, 0xe9, 0x79, 0x06, 0x00, 0x00,
}
